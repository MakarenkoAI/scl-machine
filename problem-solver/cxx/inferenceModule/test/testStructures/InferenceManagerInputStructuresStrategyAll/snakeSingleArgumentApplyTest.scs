sc_node_class
	-> atomic_logical_formula;
	-> class_tail;;

sc_node_role_relation
	-> rrel_1;
	-> rrel_main_key_sc_element;;

sc_node_norole_relation
	-> nrel_implication;
	-> nrel_tail_elements;
	-> nrel_body_elements;
	-> nrel_head;
	-> nrel_tail_head;;

if = [*
	class_tail _-> _tail;;
    _tail _=> nrel_tail_elements:: _tail_elements_tuple;;
    _tail_elements_tuple _-> _tail_element;;
    _tail_element _=> nrel_body_elements:: _body_elements_tuple;;
    _body_elements_tuple _-> _body_element;;
    _body_element _=> nrel_head:: _head;;
*];;

then = [*
    _tail _=> nrel_tail_head:: _head;;
*];;

@p1 = (if => then);;
@p1 <- nrel_implication;;
@p2 = (logic_rule -> @p1);;
@p2 <- rrel_main_key_sc_element;;

logic_rule
	-> rrel_1: _tail;;

atomic_logical_formula
	-> if;
	-> then;;

input_structures
	-> input_structure1;
	-> input_structure2;;

input_structure1 = [*
	class_tail -> tail;;
	tail => nrel_tail_elements: tail_elements_tuple;;
	tail_elements_tuple -> tail_element;;
	tail_element => nrel_body_elements: body_elements_tuple;;
*];;

input_structure2 = [*
	body_elements_tuple -> body_element;;
	body_element => nrel_head: head;;
*];;

rules_set
    -> rrel_1: { logic_rule };;

arguments
	-> rrel_1: tail;;
